[project]
name = "megatui"
version = "0.0.1"
description = "Terminal user interface application for MEGA"
license = { text = "GPLv3" }
authors = [{ name = "yaaama", email = "sau@yaaama.xyz" }]
readme = { file = "README.md", content-type = "text/markdown" }

keywords = [
  "filemanager",
  "cloud",
  "MEGA",
  "megacmd",
  "python",
  "textual",
  "tui",
]

classifiers = [
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 3 - Alpha",
  "Intended Audience :: End Users/Desktop",

  "Topic :: Communications :: File Sharing",
  "Topic :: Desktop Environment :: File Managers",
  "Topic :: Internet",
  "Topic :: Utilities",

  "Programming Language :: Python :: 3.13",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
]

requires-python = ">=3.13"
dependencies = ["textual>=3.5.0"]

[project.scripts]
megatui = "megatui.app:run_app"


[dependency-groups]
dev = [
  "pre-commit>=4.2.0",
  "ruff>=0.12.1",
  "textual-dev>=1.7.0, < 2.0.0",
  "pytest>=8.3.5",
  # "pytest-asyncio",
  # "pytest-mock",
  "basedpyright==1.31.4",
]

# Hatch
[tool.hatch.build.targets.wheel]
packages = ["src/megatui"]

[tool.hatch.build]
include = ["src/megatui"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


# Pytest
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra --color=yes" # Example: report all, quiet, with color
testpaths = [
  "tests", # Specify where your tests are located
  # "another_test_dir",
]

python_files = ["test_*.py", "*_test.py"]
# For pytest-asyncio
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "module"
# You can add markers, filterwarnings, etc. here
markers = [
  #     "slow: marks tests as slow to run",
  #     "integration: marks integration tests",
  "serial", # used to indicate tests must not run in parallel
]

[tool.pyright]
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "src/experimental",
  "src/typestubs",
]
# ignore = ["src/oldstuff"]
# stubPath = "src/stubs"

defineConstant = { DEBUG = true }
reportMissingImports = "error"
reportMissingTypeStubs = false
reportUnusedCallResult = false
reportUnannotatedClassAttribute = false
reportUnreachable = false
reportExplicitAny = false
reportAny = false
reportUnnecessaryTypeIgnoreComment = false


pythonVersion = "3.13"
pythonPlatform = "Linux"

[tool.pyrefly]
project_excludes = [
  "**/node_modules",
  "**/__pycache__",
  "src/experimental",
  "src/typestubs",
]
python_platform = "linux"
python_version = "3.13.0"

[tool.pyrefly.errors]
import-error = true


# Local Variables:
# eval: (jinx-mode 0)
# End:
