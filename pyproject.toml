[project]
name = "megatui"
version = "0.0.1"
description = "Terminal user interface for MEGA"
requires-python = ">=3.13"
readme = "README.md"
dependencies = [
  "isort>=6.0.1",
  "pytest>=8.3.5",
  # "pytest-asyncio>=1.0.0",
  # "pytest-mock>=3.14.1",
  "ruff>=0.12.1",
  "textual>=3.5.0",
  "textual-dev>=1.7.0",
]

src = ["src", "tests"]
line-length = 100
target-version = "py310"

# Add this section to explicitly tell setuptools where to find your package(s)
[tool.setuptools.packages.find]
where = ["."] # Look in the current directory (project root)
include = [
  "megatui*",
] # Include 'megatui' and any sub-packages like megatui.mega

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra --color=yes" # Example: report all, quiet, with color
testpaths = [
  "tests", # Specify where your tests are located
  # "another_test_dir",
]

python_files = ["test_*.py", "*_test.py"]


asyncio_mode = "auto"                         # For pytest-asyncio
asyncio_default_fixture_loop_scope = "module"
# You can add markers, filterwarnings, etc. here
markers = [
  #     "slow: marks tests as slow to run",
  #     "integration: marks integration tests",
  "serial", # used to indicate tests must not run in parallel
]


[tool.ruff.format]

# markers = []
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
# General
select = [
  "E",
  "E",     # pycodestyle
  "W",     # pycodestyle
  "D",     # pydocstyle
  "PL",    # pylint
  "F",
  "I",
  "C4",
  "C",
  "SIM",
  "B",
  "A",
  "ASYNC",
  "PERF",
  "RUF",
]

# Extra long
# select = ["ASYNC", "B", "A", "C4", "Q", "RET", "SIM", "SLOT", "TD", "TC",
# "PERF", "I", "D", "DOC", "F", "PL", "UP", "FURB", "RUF", "TRY"]
ignore = [
  "C901", # McCabe complexity warning
  "E501", # Line too long
  "E722", # Do not use bare `except`
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.pyright]
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "src/experimental",
  "src/typestubs",
]
# ignore = ["src/oldstuff"]
# stubPath = "src/stubs"

defineConstant = { DEBUG = true }
reportMissingImports = "error"
reportMissingTypeStubs = false
reportUnusedCallResult = false
reportUnannotatedClassAttribute = false
reportUnreachable = false
reportExplicitAny = false
reportAny = false
reportUnnecessaryTypeIgnoreComment = false


pythonVersion = "3.13"
pythonPlatform = "Linux"

# executionEnvironments = [
# { root = "src/web", pythonVersion = "3.5", pythonPlatform = "Windows", extraPaths = [ "src/service_libs" ], reportMissingImports = "warning" },
# { root = "src/sdk", pythonVersion = "3.0", extraPaths = [ "src/backend" ] },
# { root = "src/tests", extraPaths = ["src/tests/e2e", "src/sdk" ]},
# { root = "src" }
# ]

[tool.pyrefly]
project_excludes = [
  "**/node_modules",
  "**/__pycache__",
  "src/experimental",
  "src/typestubs",
]
python_platform = "linux"
python_version = "3.13.0"

[tool.pyrefly.errors]
import-error = true


# Local Variables:
# eval: (jinx-mode 0)
# End:
